// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: file.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Xamarin.ExposureNotifications
{

    /// <summary>Holder for reflection information generated from file.proto</summary>
    public static partial class TemporaryExposureKeyBatchReflection
    {

        #region Descriptor
        /// <summary>File descriptor for file.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static TemporaryExposureKeyBatchReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "CgpmaWxlLnByb3RvIjIKBEZpbGUSFwoGaGVhZGVyGAEgASgLMgcuSGVhZGVy",
                  "EhEKA2tleRgCIAMoCzIELktleSJrCgZIZWFkZXISFgoOc3RhcnRUaW1lc3Rh",
                  "bXAYASABKAMSFAoMZW5kVGltZXN0YW1wGAIgASgDEg4KBnJlZ2lvbhgDIAEo",
                  "CRIQCghiYXRjaE51bRgEIAEoBRIRCgliYXRjaFNpemUYBSABKAUiaAoDS2V5",
                  "Eg8KB2tleURhdGEYASABKAwSGgoScm9sbGluZ1N0YXJ0TnVtYmVyGAIgASgN",
                  "EhUKDXJvbGxpbmdQZXJpb2QYAyABKA0SHQoVdHJhbnNtaXNzaW9uUmlza0xl",
                  "dmVsGAQgASgFQiaqAiNYYW1hcmluLkV4cG9zdXJlTm90aWZpY2F0aW9ucy5Q",
                  "cm90bw=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatch), global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatch.Parser, new[]{ "Header", "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchHeader), global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchHeader.Parser, new[]{ "StartTimestamp", "EndTimestamp", "Region", "BatchNum", "BatchSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchKey), global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchKey.Parser, new[]{ "KeyData", "RollingStartNumber", "RollingPeriod", "TransmissionRiskLevel" }, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class TemporaryExposureKeyBatch : pb::IMessage<TemporaryExposureKeyBatch>
    {
        private static readonly pb::MessageParser<TemporaryExposureKeyBatch> _parser = new pb::MessageParser<TemporaryExposureKeyBatch>(() => new TemporaryExposureKeyBatch());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TemporaryExposureKeyBatch> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryExposureKeyBatch()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryExposureKeyBatch(TemporaryExposureKeyBatch other) : this()
        {
            header_ = other.HasHeader ? other.header_.Clone() : null;
            key_ = other.key_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryExposureKeyBatch Clone()
        {
            return new TemporaryExposureKeyBatch(this);
        }

        /// <summary>Field number for the "header" field.</summary>
        public const int HeaderFieldNumber = 1;
        private global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchHeader header_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchHeader Header
        {
            get { return header_; }
            set
            {
                header_ = value;
            }
        }
        /// <summary>Gets whether the header field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasHeader
        {
            get { return header_ != null; }
        }
        /// <summary>Clears the value of the header field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearHeader()
        {
            header_ = null;
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchKey> _repeated_key_codec
            = pb::FieldCodec.ForMessage(18, global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchKey.Parser);
        private readonly pbc::RepeatedField<global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchKey> key_ = new pbc::RepeatedField<global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchKey>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchKey> Key
        {
            get { return key_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TemporaryExposureKeyBatch);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TemporaryExposureKeyBatch other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Header, other.Header)) return false;
            if (!key_.Equals(other.key_)) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasHeader) hash ^= Header.GetHashCode();
            hash ^= key_.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasHeader)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Header);
            }
            key_.WriteTo(output, _repeated_key_codec);
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasHeader)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
            }
            size += key_.CalculateSize(_repeated_key_codec);
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TemporaryExposureKeyBatch other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasHeader)
            {
                if (!HasHeader)
                {
                    Header = new global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchHeader();
                }
                Header.MergeFrom(other.Header);
            }
            key_.Add(other.key_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            if (!HasHeader)
                            {
                                Header = new global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchHeader();
                            }
                            input.ReadMessage(Header);
                            break;
                        }
                    case 18:
                        {
                            key_.AddEntriesFrom(input, _repeated_key_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TemporaryExposureKeyBatchHeader : pb::IMessage<TemporaryExposureKeyBatchHeader>
    {
        private static readonly pb::MessageParser<TemporaryExposureKeyBatchHeader> _parser = new pb::MessageParser<TemporaryExposureKeyBatchHeader>(() => new TemporaryExposureKeyBatchHeader());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TemporaryExposureKeyBatchHeader> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryExposureKeyBatchHeader()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryExposureKeyBatchHeader(TemporaryExposureKeyBatchHeader other) : this()
        {
            _hasBits0 = other._hasBits0;
            startTimestamp_ = other.startTimestamp_;
            endTimestamp_ = other.endTimestamp_;
            region_ = other.region_;
            batchNum_ = other.batchNum_;
            batchSize_ = other.batchSize_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryExposureKeyBatchHeader Clone()
        {
            return new TemporaryExposureKeyBatchHeader(this);
        }

        /// <summary>Field number for the "startTimestamp" field.</summary>
        public const int StartTimestampFieldNumber = 1;
        private readonly static long StartTimestampDefaultValue = 0L;

        private long startTimestamp_;
        /// <summary>
        /// Time window of keys in this file based on arrival to server, in UTC.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long StartTimestamp
        {
            get { if ((_hasBits0 & 1) != 0) { return startTimestamp_; } else { return StartTimestampDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                startTimestamp_ = value;
            }
        }
        /// <summary>Gets whether the "startTimestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasStartTimestamp
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "startTimestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearStartTimestamp()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "endTimestamp" field.</summary>
        public const int EndTimestampFieldNumber = 2;
        private readonly static long EndTimestampDefaultValue = 0L;

        private long endTimestamp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long EndTimestamp
        {
            get { if ((_hasBits0 & 2) != 0) { return endTimestamp_; } else { return EndTimestampDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                endTimestamp_ = value;
            }
        }
        /// <summary>Gets whether the "endTimestamp" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasEndTimestamp
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "endTimestamp" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearEndTimestamp()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "region" field.</summary>
        public const int RegionFieldNumber = 3;
        private readonly static string RegionDefaultValue = "";

        private string region_;
        /// <summary>
        /// Region for which these keys came from (e.g., country)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Region
        {
            get { return region_ ?? RegionDefaultValue; }
            set
            {
                region_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "region" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRegion
        {
            get { return region_ != null; }
        }
        /// <summary>Clears the value of the "region" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRegion()
        {
            region_ = null;
        }

        /// <summary>Field number for the "batchNum" field.</summary>
        public const int BatchNumFieldNumber = 4;
        private readonly static int BatchNumDefaultValue = 0;

        private int batchNum_;
        /// <summary>
        /// E.g., Batch 2 of 10
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BatchNum
        {
            get { if ((_hasBits0 & 4) != 0) { return batchNum_; } else { return BatchNumDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                batchNum_ = value;
            }
        }
        /// <summary>Gets whether the "batchNum" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBatchNum
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "batchNum" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBatchNum()
        {
            _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "batchSize" field.</summary>
        public const int BatchSizeFieldNumber = 5;
        private readonly static int BatchSizeDefaultValue = 0;

        private int batchSize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BatchSize
        {
            get { if ((_hasBits0 & 8) != 0) { return batchSize_; } else { return BatchSizeDefaultValue; } }
            set
            {
                _hasBits0 |= 8;
                batchSize_ = value;
            }
        }
        /// <summary>Gets whether the "batchSize" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasBatchSize
        {
            get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "batchSize" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearBatchSize()
        {
            _hasBits0 &= ~8;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TemporaryExposureKeyBatchHeader);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TemporaryExposureKeyBatchHeader other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (StartTimestamp != other.StartTimestamp) return false;
            if (EndTimestamp != other.EndTimestamp) return false;
            if (Region != other.Region) return false;
            if (BatchNum != other.BatchNum) return false;
            if (BatchSize != other.BatchSize) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasStartTimestamp) hash ^= StartTimestamp.GetHashCode();
            if (HasEndTimestamp) hash ^= EndTimestamp.GetHashCode();
            if (HasRegion) hash ^= Region.GetHashCode();
            if (HasBatchNum) hash ^= BatchNum.GetHashCode();
            if (HasBatchSize) hash ^= BatchSize.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasStartTimestamp)
            {
                output.WriteRawTag(8);
                output.WriteInt64(StartTimestamp);
            }
            if (HasEndTimestamp)
            {
                output.WriteRawTag(16);
                output.WriteInt64(EndTimestamp);
            }
            if (HasRegion)
            {
                output.WriteRawTag(26);
                output.WriteString(Region);
            }
            if (HasBatchNum)
            {
                output.WriteRawTag(32);
                output.WriteInt32(BatchNum);
            }
            if (HasBatchSize)
            {
                output.WriteRawTag(40);
                output.WriteInt32(BatchSize);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasStartTimestamp)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimestamp);
            }
            if (HasEndTimestamp)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimestamp);
            }
            if (HasRegion)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Region);
            }
            if (HasBatchNum)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchNum);
            }
            if (HasBatchSize)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchSize);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TemporaryExposureKeyBatchHeader other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasStartTimestamp)
            {
                StartTimestamp = other.StartTimestamp;
            }
            if (other.HasEndTimestamp)
            {
                EndTimestamp = other.EndTimestamp;
            }
            if (other.HasRegion)
            {
                Region = other.Region;
            }
            if (other.HasBatchNum)
            {
                BatchNum = other.BatchNum;
            }
            if (other.HasBatchSize)
            {
                BatchSize = other.BatchSize;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 8:
                        {
                            StartTimestamp = input.ReadInt64();
                            break;
                        }
                    case 16:
                        {
                            EndTimestamp = input.ReadInt64();
                            break;
                        }
                    case 26:
                        {
                            Region = input.ReadString();
                            break;
                        }
                    case 32:
                        {
                            BatchNum = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            BatchSize = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class TemporaryExposureKeyBatchKey : pb::IMessage<TemporaryExposureKeyBatchKey>
    {
        private static readonly pb::MessageParser<TemporaryExposureKeyBatchKey> _parser = new pb::MessageParser<TemporaryExposureKeyBatchKey>(() => new TemporaryExposureKeyBatchKey());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TemporaryExposureKeyBatchKey> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Xamarin.ExposureNotifications.TemporaryExposureKeyBatchReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryExposureKeyBatchKey()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryExposureKeyBatchKey(TemporaryExposureKeyBatchKey other) : this()
        {
            _hasBits0 = other._hasBits0;
            keyData_ = other.keyData_;
            rollingStartNumber_ = other.rollingStartNumber_;
            rollingPeriod_ = other.rollingPeriod_;
            transmissionRiskLevel_ = other.transmissionRiskLevel_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryExposureKeyBatchKey Clone()
        {
            return new TemporaryExposureKeyBatchKey(this);
        }

        /// <summary>Field number for the "keyData" field.</summary>
        public const int KeyDataFieldNumber = 1;
        private readonly static pb::ByteString KeyDataDefaultValue = pb::ByteString.Empty;

        private pb::ByteString keyData_;
        /// <summary>
        /// Key of infected user
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString KeyData
        {
            get { return keyData_ ?? KeyDataDefaultValue; }
            set
            {
                keyData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }
        /// <summary>Gets whether the "keyData" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKeyData
        {
            get { return keyData_ != null; }
        }
        /// <summary>Clears the value of the "keyData" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKeyData()
        {
            keyData_ = null;
        }

        /// <summary>Field number for the "rollingStartNumber" field.</summary>
        public const int RollingStartNumberFieldNumber = 2;
        private readonly static uint RollingStartNumberDefaultValue = 0;

        private uint rollingStartNumber_;
        /// <summary>
        /// Interval number when the key's EKRollingPeriod started.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RollingStartNumber
        {
            get { if ((_hasBits0 & 1) != 0) { return rollingStartNumber_; } else { return RollingStartNumberDefaultValue; } }
            set
            {
                _hasBits0 |= 1;
                rollingStartNumber_ = value;
            }
        }
        /// <summary>Gets whether the "rollingStartNumber" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRollingStartNumber
        {
            get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "rollingStartNumber" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRollingStartNumber()
        {
            _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "rollingPeriod" field.</summary>
        public const int RollingPeriodFieldNumber = 3;
        private readonly static uint RollingPeriodDefaultValue = 0;

        private uint rollingPeriod_;
        /// <summary>
        /// Number of 10-minute windows between key rolling.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint RollingPeriod
        {
            get { if ((_hasBits0 & 2) != 0) { return rollingPeriod_; } else { return RollingPeriodDefaultValue; } }
            set
            {
                _hasBits0 |= 2;
                rollingPeriod_ = value;
            }
        }
        /// <summary>Gets whether the "rollingPeriod" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasRollingPeriod
        {
            get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "rollingPeriod" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearRollingPeriod()
        {
            _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "transmissionRiskLevel" field.</summary>
        public const int TransmissionRiskLevelFieldNumber = 4;
        private readonly static int TransmissionRiskLevelDefaultValue = 0;

        private int transmissionRiskLevel_;
        /// <summary>
        /// Risk of transmission associated with the person this key came from.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TransmissionRiskLevel
        {
            get { if ((_hasBits0 & 4) != 0) { return transmissionRiskLevel_; } else { return TransmissionRiskLevelDefaultValue; } }
            set
            {
                _hasBits0 |= 4;
                transmissionRiskLevel_ = value;
            }
        }
        /// <summary>Gets whether the "transmissionRiskLevel" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTransmissionRiskLevel
        {
            get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "transmissionRiskLevel" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTransmissionRiskLevel()
        {
            _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as TemporaryExposureKeyBatchKey);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TemporaryExposureKeyBatchKey other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (KeyData != other.KeyData) return false;
            if (RollingStartNumber != other.RollingStartNumber) return false;
            if (RollingPeriod != other.RollingPeriod) return false;
            if (TransmissionRiskLevel != other.TransmissionRiskLevel) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (HasKeyData) hash ^= KeyData.GetHashCode();
            if (HasRollingStartNumber) hash ^= RollingStartNumber.GetHashCode();
            if (HasRollingPeriod) hash ^= RollingPeriod.GetHashCode();
            if (HasTransmissionRiskLevel) hash ^= TransmissionRiskLevel.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (HasKeyData)
            {
                output.WriteRawTag(10);
                output.WriteBytes(KeyData);
            }
            if (HasRollingStartNumber)
            {
                output.WriteRawTag(16);
                output.WriteUInt32(RollingStartNumber);
            }
            if (HasRollingPeriod)
            {
                output.WriteRawTag(24);
                output.WriteUInt32(RollingPeriod);
            }
            if (HasTransmissionRiskLevel)
            {
                output.WriteRawTag(32);
                output.WriteInt32(TransmissionRiskLevel);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (HasKeyData)
            {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(KeyData);
            }
            if (HasRollingStartNumber)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollingStartNumber);
            }
            if (HasRollingPeriod)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RollingPeriod);
            }
            if (HasTransmissionRiskLevel)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransmissionRiskLevel);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TemporaryExposureKeyBatchKey other)
        {
            if (other == null)
            {
                return;
            }
            if (other.HasKeyData)
            {
                KeyData = other.KeyData;
            }
            if (other.HasRollingStartNumber)
            {
                RollingStartNumber = other.RollingStartNumber;
            }
            if (other.HasRollingPeriod)
            {
                RollingPeriod = other.RollingPeriod;
            }
            if (other.HasTransmissionRiskLevel)
            {
                TransmissionRiskLevel = other.TransmissionRiskLevel;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            KeyData = input.ReadBytes();
                            break;
                        }
                    case 16:
                        {
                            RollingStartNumber = input.ReadUInt32();
                            break;
                        }
                    case 24:
                        {
                            RollingPeriod = input.ReadUInt32();
                            break;
                        }
                    case 32:
                        {
                            TransmissionRiskLevel = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
